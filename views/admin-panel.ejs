<!DOCTYPE html>
<html>
  <head>
    <title>Excel Editor</title>
    <!-- Include the necessary CSS and JS files for Handsontable -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
      integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
      crossorigin="anonymous"
    />
    <script
      defer
      src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
      integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN"
      crossorigin="anonymous"
    ></script>
    <script
      defer
      src="https://cdn.jsdelivr.net/npm/popper.js@1.12.9/dist/umd/popper.min.js"
      integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q"
      crossorigin="anonymous"
    ></script>
    <script
      defer
      src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js"
      integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl"
      crossorigin="anonymous"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <link rel="stylesheet" href="/css/client-panel.css" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
    <!-- Include the HyperFormula library -->
    <script src="https://cdn.jsdelivr.net/npm/hyperformula@1.5.2/dist/hyperformula.min.js"></script>
  </head>
  <body>
    <%-include("partials/navbar") %>
    <button onclick="addColumn()">Add Column</button>
    <button onclick="addRow()">Add Row</button>

    <button onclick="saveData()">Save</button>
    <button id="exportButton">Export Excel</button>
    <div id="excel-container"></div>
    <script>
      const container = document.getElementById("excel-container");
      const exportButton = document.getElementById("exportButton");
      let hot;

      // Load the initial data from the server

      fetch("/load")
        .then((response) => response.json())
        .then((data) => {
          hot = new Handsontable(container, {
            licenseKey: "non-commercial-and-evaluation",
            data: data,
            rowHeaders: true,
            colHeaders: true,
            contextMenu: true,
            formulas: {
              engine: HyperFormula,
              // [plugin configuration]
            },
            afterChange: function (changes) {
              // Handle cell changes here
              console.log("Cell changes:", changes);
            },
          });

          console.log(data);
        })
        .catch((error) => {
          console.error("Error loading data:", error);
        });

      // Create a HyperFormula instance
      const hf = HyperFormula.buildEmpty({
        licenseKey: "internal-use-in-handsontable", // Replace with your HyperFormula license key
      });

      exportButton.addEventListener("click", async () => {
        try {
          // Make a request to your backend to generate and serve the modified Excel file
          const response = await fetch("/load", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            // Create a temporary link element and set the download attribute to trigger the file download
            const downloadLink = document.createElement("a");
            downloadLink.href = URL.createObjectURL(await response.blob());
            downloadLink.download = "modified_file.xlsx";

            // Programmatically trigger the download
            downloadLink.click();
          } else {
            console.error("Failed to export Excel file");
          }
        } catch (error) {
          console.error("Error exporting Excel file:", error);
        }
      });

      // Add a new column
      function addColumn() {
        hot.alter("insert_col");
      }

      // Delete the selected column
      function deleteColumn() {
        const selectedColumn = hot.getSelected()[1];
        hot.alter("remove_col", selectedColumn);
      }

      // Add a new row
      function addRow() {
        hot.alter("insert_row");
      }

      // Save the modified data to the server
      function saveData() {
        const jsonData = hot.getData();
        fetch("/save", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(jsonData),
        })
          .then((response) => response.text())
          .then((message) => {
            console.log("Data saved:", message);
          })
          .catch((error) => {
            console.error("Error saving data:", error);
          });
      }
    </script>
  </body>
</html>
